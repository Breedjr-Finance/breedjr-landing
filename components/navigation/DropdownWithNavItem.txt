"use client";

import {
    Popover,
    PopoverContent,
    PopoverTrigger
} from "@/components/ui/popover";
import { ChevronDown, ChevronRight } from "lucide-react";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
import { useCallback, useRef, useState } from "react";
import { IconType } from "react-icons";
import { LucideIcon } from "lucide-react";
import { useMediaQuery } from "@/app/hooks/use-media-query";
import { Button } from "@/components/ui/button";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
// import NavItem from "./NavItem";
import Link from "next/link";

interface DropdownItemProps {
    icon?: LucideIcon | IconType;
    to: string;
    title: string;
}

interface DropdownWithNavItemProps {
    icon?: LucideIcon | IconType;
    title: string;
    dropdownItems: DropdownItemProps[];
    path?: string;
    onClick?: () => void;

}

const DropdownWithNavItem: React.FC<DropdownWithNavItemProps> = ({
    icon: Icon,
    title,
    dropdownItems, path
}) => {
    const pathname = usePathname();
    const isDesktop = useMediaQuery("(min-width: 768px)");
    const [open, setOpen] = useState(false);
    const closeTimeoutRef = useRef<NodeJS.Timeout | null>(null);

    const handleOpenChange = useCallback(
        (value: boolean) => {
            if (!isDesktop) setOpen(value);
        },
        [isDesktop]
    );

    const handleMouseEnter = useCallback(() => {
        if (isDesktop) {
            if (closeTimeoutRef.current) clearTimeout(closeTimeoutRef.current);
            setOpen(true);
        }
    }, [isDesktop]);

    const handleMouseLeave = useCallback(() => {
        if (isDesktop) {
            closeTimeoutRef.current = setTimeout(() => setOpen(false), 150);
        }
    }, [isDesktop]);


    return (
        <Popover open={open} onOpenChange={handleOpenChange}>
            <div onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
                <PopoverTrigger
                    asChild
                    // onMouseEnter={() => isDesktop && setOpen(true)}
                    // onMouseLeave={() => isDesktop && setOpen(false)}
                    className="focus-visible:border-0 focus-visible:ring-0"

                >
                    <Button
                        // onClick={() => !isDesktop && setOpen(!open)}
                        onClick={() => !isDesktop && setOpen((prev) => !prev)}
                        // variant="ghost"
                        className={cn(
                            "flex items-center gap-1 text-sm font-medium transition-colors p-0 w-fit has-[>svg]:px-0 bg-transparent hover:bg-transparent hover:text-primary shadow-none focus-visible:ring-0 focus-visible:border-0",
                            pathname?.split('/')[1] === path ? "text-primary"
                                : "text-foreground",

                            // pathname.includes(title?.toLowerCase())
                        )}

                    >
                        {Icon && <Icon className="size-4" />}
                        {title}
                        <ChevronDown className={cn("ml-1 size-4 transition-transform",
                            open ? "rotate-180" : "rotate-0"
                        )} />
                    </Button>
                </PopoverTrigger>

                <PopoverContent
                    // onMouseEnter={() => isDesktop && setOpen(true)}
                    // onMouseLeave={() => isDesktop && setOpen(false)}
                    // className="grid grid-cols-3 w-xl gap-1 rounded-xl border bg-white p-2 shadow-lg dark:border-gray-800 dark:bg-gray-950 z-[999]"
                    className={cn(
                        "z-50 mt-2 grid grid-cols-3 w-xl  rounded-xl border bg-white p-2 shadow-xl dark:border-gray-800 dark:bg-gray-950 animate-in fade-in slide-in-from-top-2",
                        // "before:absolute before:top-full before:left-5 before:-ml-1 before:h-2 before:w-2 before:rotate-45 before:bg-white before:dark:bg-gray-950 before:shadow-md before:z-[-1]"
                    )}
                    // "z-[9999] mt-2 w-60 rounded-xl border bg-white p-2 shadow-xl dark:border-gray-800 dark:bg-gray-950",
                    // "transition-all duration-200 ease-out animate-in fade-in slide-in-from-top-2",
                    // "before:absolute before:top-full before:left-6 before:-ml-1 before:h-2 before:w-2 before:rotate-45 before:bg-white before:dark:bg-gray-950 before:shadow-md before:z-[-1]"
                    align="start"
                >
                    {dropdownItems.map((item, i) => {
                        const currentPath = item.to?.split('/')[item.to?.split('/')?.length >= 3 ? 2 : 1]
                        const mainPath = pathname.split('/')[pathname?.split('/')?.length >= 3 ? 2 : 1]
                        const isActive = mainPath === currentPath;
                        return (
                            <Link
                                key={i}
                                href={item.to}
                                className={
                                    cn(
                                        "flex items-center gap-2 rounded-md py-2 text-sm transition-colors hover:text-primary capitalize"
                                        , isActive ? 'text-primary' : "text-foreground"
                                    )
                                }
                                onClick={() => setOpen(false)}
                            >
                                {item.icon && <item.icon className="size-4" />}
                                {item.title}
                            </Link>

                        )
                    }

                    )}
                </PopoverContent>
            </div>
        </Popover>
    );
};
const DropdownWithNavItemMobile: React.FC<DropdownWithNavItemProps> = ({
    icon: Icon,
    title,
    onClick,
    dropdownItems, path,
}) => {
    const pathname = usePathname();
    const [open, setOpen] = useState(false);

    const handleClose = () => {
        setOpen(false)
        onClick?.()
    }
    return (
        <div className="">
            <Collapsible
                open={open}
                onOpenChange={setOpen}
            // className=""

            >
                <CollapsibleTrigger
                    asChild
                >
                    <Button
                        // variant="ghost"
                        className={cn(
                            "flex items-center gap-1 text-sm font-medium transition-colors p-0 w-fit has-[>svg]:px-0 bg-transparent hover:bg-transparent hover:text-primary shadow-none",
                            pathname?.split('/')[1] === path ? "text-primary"
                                : "text-foreground"
                            // pathname.includes(title?.toLowerCase())
                        )}
                    >
                        {Icon && <Icon className="size-4" />}
                        <span className="sr-only">{title}</span>
                        {title}
                        <ChevronRight className={cn("size-4 ",
                            open && 'rotate-90'
                        )} />
                    </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="flex flex-wrap gap-2 border p-3 rounded-lg">
                    {dropdownItems.map((item, i) => {
                        const currentPath = item.to?.split('/')[item.to?.split('/')?.length >= 3 ? 2 : 1]
                        const mainPath = pathname.split('/')[pathname?.split('/')?.length >= 3 ? 2 : 1]
                        const isActive = mainPath === currentPath;
                        return (
                            <Link
                                key={i}
                                href={item.to}
                                className={
                                    cn(
                                        "flex items-center gap-2 rounded-md py-2 text-sm transition-colors hover:text-primary capitalize"
                                        , isActive ? 'text-primary' : "text-foreground"
                                    )
                                }
                                onClick={handleClose}
                            >
                                {item.icon && <item.icon className="size-4" />}
                                {item.title}
                            </Link>

                        )
                    }

                    )}
                </CollapsibleContent>
            </Collapsible>

        </div>

    );
};

export { DropdownWithNavItem, DropdownWithNavItemMobile };
